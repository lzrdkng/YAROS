* Yet Another Real-time OS
  *YAROS* is a small project of mine that I did during class for
   fun. It's my first attempt to make an OS kernel and it's not yet a
   real-time OS, but it will be.

* Tasks TODO [0/10]
  - [-] Develop tests
  - [-] Better configuration script
  - [-] Better device driver selection
  - [-] Memory manager
  - [-] File System 
  - [-] Better source code layout 
  - [-] Real-time scheduling
  - [-] C++ Compatible
  - [-] Test on different MCU
  - [-] Profiler

* MCU
  I've been developing YAROS on hardware and in a simulator for the
  *ATmega324PA*. I plan to port it to different MCU and different avr
  families.

** Supported MCU for Scheduling
*** megaAVR Family [9/35]
    
    - [-] 8
    - [-] 8l
    - [-] 16
    - [-] 32
    - [-] 32u4
    - [-] 48
    - [-] 48P
    - [-] 48PA
    - [-] 88
    - [-] 88P
    - [-] 88PA
    - [-] 128
    - [-] 128L
    - [-] 128rtfa1
    - [-] 128rfr2
    - [X] 164
    - [X] 164A 
    - [X] 164PA
    - [-] 168
    - [-] 168P
    - [-] 168PA
    - [X] 324
    - [X] 324P
    - [X] 324A
    - [X] 324PA
    - [-] 328
    - [-] 328p
    - [-] 644
    - [-] 644A
    - [-] 644PA
    - [-] 1280
    - [-] 1281
    - [X] 1284
    - [X] 1284P
    - [-] 2560

* GNU11
  I use *GNU11* extensions for *C*. Notable usage are function
  attributes and flexible array members. The latest is not compatible
  with *C++*. This was a design decision because I needed everything
  to be compiled time. Although it would be possible to accomplish the
  same thing using templates, I didn't try it yet. The best thing
  would be to implement a memory manager to avoid using those compile
  time constraint. The kernel itself should only be written in C, or
  C++ written like C. Basically, the only thing I want from C++ is
  template for better meta-programming, nothing else.

* Configuration
  I made YAROS entirely configurable at compiling time. To do so, I
  made a little python script (*scripts/kconfigure*). It's a trivial
  script that ask what value to assign to a config option. It then
  generates a *kconfig.list* file. This file is then used by the same
  script to generate *include/kconfig.h* that is imported by
  *include/YAROS/config.h*. I wanted a better way to generate
  configuration and control dependencies. \\

* Xlist
  I make extensive use of *X macros* to keep files synchronized, see
  the *.xlist* files.

* Definition of a Task
  A task in YAROS is what we can refer to as a thread. There are 3
  properties that you should consider when developing a task. Its
  priority, its nice value and its stack size.

** Priority
   Task's priority range between 0 and 7 inclusive. The lower the
   value is, the higher is the priority. As for now, the priority
   only dictated the order of the task in the running queue. This
   behaviour might change in the future.

** Niceness
   The nice value determine how much CPU time his allocated for the
   task before rescheduling. We said that a task is nice to other if
   its nice value is high. This means that the task will be running
   less time before scheduling to another task. On the opposite, a
   task that is not nice, i.e. with a low value of nice, will run
   longer.

** Stack size
   The stack size is probably the most important value to
   evaluate. Underestimate the value and you might overflow and corrupt
   your RAM, resulting in an undefined behaviour. Overestimate and you
   will waste RAM space. A good way to start is to put a high safe
   value. Then, reduce the stack size until there's a problem. From
   there, just return to your last safe point and add some padding
   just to be extra careful. Stack overflow is the most common and
   dangerous problem, be very cautious.

   Note that the size of your stack is added with the minimal stack
   value, which is 40 bytes. This minimal stack is to ensure there's
   enough space for context switch. (32 registers + SREG + return
   address + kill_self address = 37 bytes). I added a little padding
   just to be cautious.


* Example
  #+BEGIN_SRC C
    #include "YAROS.h"

    /* foo has priority level 0, nice value of 5 and a stack of 50 bytes */
    struct task foo = TASK(TASK_P0, TASK_N5, 50);

    /* foo has priority level 4, nice value of 9 and a stack of 75 bytess */
    struct task bar = TASK(TASK_P4, TASK_N9, 75);

    OS_TASK void
    do_foo(void *task);

    OS_TASK void
    do_bar(void *nil);

    int
    main(int argc, char *argv[])
    {
        /* Initialize the Kernel */
        kinit();

        /* Foo is scheduled */
        run_task(&foo,
                 do_foo,
                 &bar);

        /* Bar is suspended */
        init_task(&bar,
                  do_bar,
                  NULL);

        krun();
    }


    OS_TASK void
    do_foo(void *bar_task)
    {
        static const foo_str[] = {'f', 'o', 'o', '\n'};

        while (1) {

            /* Write "foo_str\n" to USART 0 */
            write_usart(0, foo_str, sizeof(foo_str));

            /* Resume bar */
            resume(bar_task);

            /* Wait 1 second */
            wait(HZ);

            /* Suspend bar */
            suspend(bar_task);
        }
    }

    OS_TASK void
    do_bar(void *nil)
    {
        static const bar_str[] = {'b', 'a', 'r', '\n'};

        while (1) {

            /* Write "bar\n" to USART 0 */
            write_usart(0, bar_str, sizeof(bar_str));
            
            /* Wait 1/2 second */
            wait(HZ / 2);
        }
    }
  #+END_SRC
** Output
   #+BEGIN_SRC bash
     Loaded 6770 .text at address 0x0
     Loaded 244 .data
     avr_gdb_init listening on port 1234
     gdb_network_handler connection opened
     gdb_network_handler recv: Connection reset by peer
     gdb_network_handler connection closed
     gdb_network_handler connection opened
     foo.
     bar.
     bar.
     foo.
     bar.
     bar.
     foo.
     bar.
     bar.
     foo.
     bar.
     GDB hit control-c
   #+END_SRC
